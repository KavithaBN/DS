package eclipsepackage;

import java.util.*;

public class deletenodefromtree
{
	
		class Node{
			int key;
			Node left,right;
			public Node (int d)
			{
				key =d;
				left = right =null;
			}
		}
	
	Node root;
	
	Node insert(Node root,int key)
	{
		if(root==null)
		{
			root = new Node(key);
		return root;
		}
	
	if(key <root.key)
	{
		root.left =insert(root.left,key);
	}
		else if(key>root.key)
		{
			root.right =insert(root.right,key);
		}
	return root;
}
	
	void inorderrec (Node root)
	{
		if(root!=null)
		{
			inorderrec(root.left);
			System.out.println(root.key);
			inorderrec(root.right);
		}
	}
	
	 void deleteR(int key)
	    {
	        root = deleteKey(root, key);
	    }
	 
	   
	  
	Node deleteKey( Node root, int key){
		if( root == null) return root;
		if(key<root.key)
		{
			root.left =deleteKey(root.left,key);
		}
		else if (key>root.key)
		{
			root.right =deleteKey(root.right,key);
		}
		else
		{
			if(root.left ==null)
				return root.right;
			else if (root.right==null)
				return root.left;
			root.key = minValue(root.right);
			root.right =deleteKey(root.right,root.key);
			
		}
		return root;
	}
	
	int minValue (Node root){
		int min = root.key;
		while(root.left!=null)
		{
			min =root.left.key;
			root=root.left;
		}
		return min;
	}
	public static void main(String[] args)
	{
		deletenodefromtree tree = new deletenodefromtree();
		Node root = null;
	     root = tree.insert(root, 4);
	    
	        tree.insert(root,50);
	        tree.insert(root,30);
	        tree.insert(root,20);
	        tree.insert(root,40);
	        tree.insert(root,70);
	        tree.insert(root,60);
	        tree.insert(root,80);
	 
	        System.out.println("Inorder traversal of the given tree");
	        tree.inorderrec();
	 
	        System.out.println("\nDelete 20");
	        tree.deleteR(20);
	        System.out.println("Inorder traversal of the modified tree");
	        tree.inorderrec();
	 
	        System.out.println("\nDelete 30");
	        tree.deleteR(30);
	        System.out.println("Inorder traversal of the modified tree");
	        tree.inorderrec();
	 
	        System.out.println("\nDelete 50");
	        tree.deleteR(50);
	        System.out.println("Inorder traversal of the modified tree");
	        tree.inorderrec();
		
	}
}